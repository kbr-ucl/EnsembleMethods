// This file was auto-generated by ML.NET Model Builder. 

using Microsoft.ML;
using Microsoft.ML.Trainers.LightGbm;

namespace GradientBoosting; 

public partial class GradientBoosting
{
    public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
    {
        var pipeline = BuildPipeline(context);
        var model = pipeline.Fit(trainData);

        return model;
    }

    /// <summary>
    ///     build the pipeline that is used from model builder. Use this function to retrain model.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <returns></returns>
    public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
    {
        // Data process configuration with pipeline data transformations
        var pipeline = mlContext.Transforms.ReplaceMissingValues(new[]
            {
                new InputOutputColumnPair(@"SepalLengthCm", @"SepalLengthCm"),
                new InputOutputColumnPair(@"SepalWidthCm", @"SepalWidthCm"),
                new InputOutputColumnPair(@"PetalLengthCm", @"PetalLengthCm"),
                new InputOutputColumnPair(@"PetalWidthCm", @"PetalWidthCm")
            })
            .Append(mlContext.Transforms.Concatenate(@"Features", @"SepalLengthCm", @"SepalWidthCm", @"PetalLengthCm",
                @"PetalWidthCm"))
            .Append(mlContext.Transforms.Conversion.MapValueToKey(@"Species", @"Species"))
            .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))
            .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options
            {
                NumberOfLeaves = 4, NumberOfIterations = 4, MinimumExampleCountPerLeaf = 20, LearningRate = 1,
                LabelColumnName = @"Species", FeatureColumnName = @"Features", ExampleWeightColumnName = null,
                Booster = new GradientBooster.Options
                    {SubsampleFraction = 1, FeatureFraction = 1, L1Regularization = 2E-10, L2Regularization = 1},
                MaximumBinCountPerFeature = 256
            }))
            .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

        return pipeline;
    }
}