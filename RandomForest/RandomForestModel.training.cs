﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;
using Microsoft.ML.Trainers.FastTree;

namespace RandomForest
{
    //https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.treeextensions.fastforest?view=ml-dotnet

    public partial class RandomForestModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Define trainer options.
            var options = new FastForestBinaryTrainer.Options
            {
                // Only use 80% of features to reduce over-fitting.
                FeatureFraction = 0.8,
                // Create a simpler model by penalizing usage of new features.
                FeatureFirstUsePenalty = 0.1,
                // Reduce the number of trees to 50.
                NumberOfTrees = 50
            };

            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new[]
                {
                    new InputOutputColumnPair(@"SepalLengthCm", @"SepalLengthCm"),
                    new InputOutputColumnPair(@"SepalWidthCm", @"SepalWidthCm"),
                    new InputOutputColumnPair(@"PetalLengthCm", @"PetalLengthCm"),
                    new InputOutputColumnPair(@"PetalWidthCm", @"PetalWidthCm")
                })
                .Append(mlContext.Transforms.Concatenate(@"Features",
                    new[] {@"SepalLengthCm", @"SepalWidthCm", @"PetalLengthCm", @"PetalWidthCm"}))
                .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: @"Species",
                    inputColumnName: @"Species"))
                .Append(mlContext.BinaryClassification.Trainers.FastForest(labelColumnName: @"Species")
                    //())// LightGbmMulticlassTrainer.Options(){NumberOfLeaves=4,NumberOfIterations=4,MinimumExampleCountPerLeaf=20,LearningRate=1,LabelColumnName=@"Species",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=1,FeatureFraction=1,L1Regularization=2E-10,L2Regularization=1},MaximumBinCountPerFeature=256}))      

                    //FastForestBinaryTrainer// FastForestBinaryTrainer
                    //.Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options(){NumberOfLeaves=4,NumberOfIterations=4,MinimumExampleCountPerLeaf=20,LearningRate=1,LabelColumnName=@"Species",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=1,FeatureFraction=1,L1Regularization=2E-10,L2Regularization=1},MaximumBinCountPerFeature=256}))      
                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: @"PredictedLabel", inputColumnName: @"PredictedLabel")));

            return pipeline;
        }
    }
}

//public static Microsoft.ML.Trainers.FastTree.FastForestBinaryTrainer FastForest(this Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers catalog, string labelColumnName = "Label", string featureColumnName = "Features", string exampleWeightColumnName = default, int numberOfLeaves = 20, int numberOfTrees = 100, int minimumExampleCountPerLeaf = 10);

